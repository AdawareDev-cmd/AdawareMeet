"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = void 0;
var path_1 = require("path");
var fs_1 = __importDefault(require("fs"));
var chalk_1 = __importDefault(require("chalk"));
var LogType;
(function (LogType) {
    LogType["LOG"] = "LOG";
    LogType["WARN"] = "WARN";
    LogType["ERR"] = "ERR";
})(LogType || (LogType = {}));
var Logger = /** @class */ (function () {
    function Logger(loggerOptions) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.showTimestamp = (_a = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.showLogLevel) !== null && _a !== void 0 ? _a : true;
        this.showLogLevel = (_b = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.showLogLevel) !== null && _b !== void 0 ? _b : true;
        this.logFileOptions = {
            enabled: (_c = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.enabled) !== null && _c !== void 0 ? _c : true,
            filename: (_d = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.filename) !== null && _d !== void 0 ? _d : 'logs.txt',
            folderPath: (_e = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.folderPath) !== null && _e !== void 0 ? _e : process.cwd(),
            logLevels: (_f = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.logLevels) !== null && _f !== void 0 ? _f : ['all'],
            addTimestamp: (_g = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.addTimestamp) !== null && _g !== void 0 ? _g : true,
            addLogLevel: (_h = loggerOptions === null || loggerOptions === void 0 ? void 0 : loggerOptions.logFileOptions.addLogLevel) !== null && _h !== void 0 ? _h : true,
        };
        this.logFilePath = "" + this.logFileOptions.folderPath + path_1.sep + this.logFileOptions.filename;
        this.logFile = fs_1.default.openSync(this.logFilePath, 'a+');
    }
    Logger.prototype.log = function (message) {
        this.printMessage(LogType.LOG, message);
        if (this.logFileOptions.enabled)
            this.saveLog(LogType.LOG, message);
    };
    Logger.prototype.warn = function (message) {
        this.printMessage(LogType.WARN, message);
        if ((this, this.logFileOptions.enabled))
            this.saveLog(LogType.WARN, message);
    };
    Logger.prototype.err = function (message) {
        this.printMessage(LogType.ERR, message);
        if (this.logFileOptions.enabled)
            this.saveLog(LogType.ERR, message);
    };
    Logger.prototype.saveLog = function (logType, message) {
        var output = (this.logFileOptions.addTimestamp ? "[" + this.getTimestamp() + "]" : '') +
            (this.logFileOptions.addLogLevel
                ? (this.logFileOptions.addTimestamp ? ' - ' : '') + logType
                : '') +
            ': ' +
            message +
            '\n';
        fs_1.default.writeSync(this.logFile, output);
    };
    Logger.prototype.printMessage = function (logType, message) {
        var output = (this.logFileOptions.addTimestamp
            ? chalk_1.default.underline.bold("[" + this.getTimestamp() + "]")
            : '') +
            (this.logFileOptions.addLogLevel
                ? (this.logFileOptions.addTimestamp ? ' - ' : '') +
                    this.colorLogType(logType)
                : '') +
            ': ' +
            message;
        console.log(output);
    };
    Logger.prototype.getTimestamp = function () {
        var date = new Date();
        var timestamp = date.getHours().toString().padStart(2, '0') +
            ':' +
            date.getMinutes().toString().padStart(2, '0') +
            ':' +
            date.getSeconds().toString().padStart(2, '0');
        return timestamp;
    };
    Logger.prototype.colorLogType = function (logType) {
        switch (logType) {
            case LogType.LOG:
                return chalk_1.default.green.bold(logType);
            case LogType.WARN:
                return chalk_1.default.yellow.bold(logType);
            case LogType.ERR:
                return chalk_1.default.red.bold(logType);
        }
    };
    return Logger;
}());
exports.Logger = Logger;
